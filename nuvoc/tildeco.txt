








****** Vocabulary/tildeco ******
From J Wiki
< Vocabulary
Jump to: navigation, search
>> <<   Down_to:_Dyad   Back_to:_Vocabulary Thru_to:_Dictionary
      ~: y Nub Sieve
Rank_Infinity -- operates on x and y as a whole, by items of y -- WHY_IS_THIS_IMPORTANT?


A Boolean vector with one value per item of y . Which is 1 if the item does not match any previous item.
Therefore, 1s in the result indicate the positions of the unique items of y.
   z=: 'abracadabra'
   ~.z	NB. Nub z - the unique values
abrcd
   ~:z	NB. Nub Sieve z
1 1 1 0 1 0 1 0 0 0 0
   (~:z) # z   NB. another way to get the unique values
abrcd
=======================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================
**** Common Uses ****
1. Wherever data is held in 2 parallel lists, Nub Sieve (~:) yields a vector capable of pruning the second list to match the Nub (~.) of the first.
   NAME=: 'Joe' ; 'Bob' ; 'Jim' ; 'Mary' ; 'Jim'
   AGE=: 25 60 32 21 33

   ] z=. ~: NAME	NB. "sieve" to apply to AGE
1 1 1 1 0
   ] NAME=: ~. NAME
+---+---+---+----+
|Joe|Bob|Jim|Mary|
+---+---+---+----+
   ] AGE=: z # AGE
25 60 32 21

**** Related Primitives ****
Nub (~. y)

**** Details ****
1. ~: y is a member of the_i._family. 1. ~: y uses tolerant_comparison. Use ~:!.0 y for intolerant comparison. Because of tolerant comparison, the number of 1s in ~: y may depend on the order of the items of y. 1. ~. y is equivalent to (~: y) # y. 1. The result of ~: y is always a list.
=======================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================
      x ~: y Not-Equal
Rank_0_0 -- operates on individual atoms of x and y, producing a result of the same shape -- WHY_IS_THIS_IMPORTANT?


The Boolean result of comparing two items, or lists of items, atom by atom.
Use NotMatch (x -.@-: y) to see if two entire nouns are different.
   ]z=: i.5
0 1 2 3 4
   3 ~: z
1 1 1 0 1
   z ~: z
0 0 0 0 0
   z ~: |.z
1 1 0 1 1
Not-Equal (~:) works between boxed items too:
   z=: 'alpha' ; 'bravo' ; 'charlie'
   z ~: |.z
1 0 1
   z ~: <'bravo'
1 0 1
To avoid x~:y giving length error, the Shape_Of ($) x and y must follow the rules for Plus (+).

**** Common Uses ****
1. To construct criteria for conditional expressions in verb definitions
 if. '.' ~: y do. return. end.
NB. instead of:
 if. -. '.' = y do. return. end.

**** Related Primitives ****
Equal (x = y), Larger_Than (x > y), Larger_Or_Equal (x >: y), Less_Than (x < y), Less_Or_Equal (x <: y), Match (x -: y)
=======================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================
**** More Information ****
1. See the_rules_for_equality for a discussion of tolerant_comparison and nonnumeric arguments.

**** Use These Combinations ****
Combinations using x ~: y that have exceptionally_good_performance include those shown in Searching_and_Matching_Items:_Fast_List_Operations_(FLOs), as well as the following:
                                                        Type;                                        Variants;        Benefits;
                       What it does                  Precisions;           Syntax                   Restrictions      Bug Warnings
                                                        Ranks
          Boolean reductions on infixes                 Boolean           x +./\ y                x positive          much faster than alternatives
                                                                                            *. = ~: in place of +.
                     Mean on infixes      integer and floating-point    x (+/%#)\ y                x positive         much faster than alternatives
                                                                                             *. = ~: in place of +
        Boolean reductions on partitions                Boolean           x +//. y   = <. >. +. * *. ~: in place of + avoids building argument cells
                                                                     x ~://.@(*./) y
      Polynomial Multiplication (Boolean)               Boolean      x ~://.@(+./) y                                  avoids building argument cells
                                                                     x +//.@(*./) y
                                                                     x +//.@(+./) y
      Boolean reductions along diagonals                Boolean            +.//. y   *. = ~: < <: > >: in place of +. avoids building argument cells
=======================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================

Retrieved from "https://code.jsoftware.com/mediawiki/index.php?title=Vocabulary/tildeco&oldid=5089"
Category:
    * Voc
***** Navigation menu *****
**** Personal tools ****
    * Log_in
**** Namespaces ****
    * Page
    * Discussion
??
**** Variants ****
**** Views ****
    * Read
    * View_source
    * View_history
??
**** More ****
**** Search ****
[Unknown INPUT type][Search][Go]
**** Navigation ****
    * New_Users
    * Guides
    * NuVoc
    * System
    * Showcase
    * Library
    * Community
    * Recent_changes
    * Random_page
    * J_wiki_search
**** Tools ****
    * What_links_here
    * Related_changes
    * Special_pages
    * Printable_version
    * Permanent_link
    * Page_information
    * Cite_this_page
    * This page was last edited on 19 June 2014, at 05:48.
    * About_J_Wiki
    * [Powered_by_MediaWiki]
