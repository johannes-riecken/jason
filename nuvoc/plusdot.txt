








****** Vocabulary/plusdot ******
From J Wiki
< Vocabulary
Jump to: navigation, search
>> <<   Down_to:_Dyad   Back_to:_Vocabulary Thru_to:_Dictionary
      +. y Real / Imaginary
Rank_0 -- operates on individual atoms of y, producing a result of higher rank -- WHY_IS_THIS_IMPORTANT?

=======================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================
Decomposes complex numbers into real and imaginary parts
   +. 3j5
3 5
   +. 3j5 4j7
3 5
4 7
   +. 2 2$ 3j5 4j7 2j1 8
3 5
4 7

2 1
8 0
=======================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================
**** Common uses ****
Real/Imaginary_video
Complex_arithmetic.

**** Related Primitives ****
Signum_(Unit_Circle) (* y), Length/Angle (*. y), Magnitude (* y), Imaginary_*_Complex (j.), Circle_Functions (x o. y), Angle_*_Polar (r.)

      x +. y GCD (Or)
Rank_0_0 -- operates on individual atoms of x and y, producing a result of the same shape -- WHY_IS_THIS_IMPORTANT?


The logical operation Or between two Boolean nouns x and y.
In the more general case where x or y are not Boolean, the result is the Greatest Common Divisor (GCD) of x and y.
   0 0 1 1 +. 0 1 0 1
0 1 1 1
   (0 1) +./ (0 1)      NB. Truth-table of: +.
0 1
1 1
   (0 1) +.table (0 1)  NB. Truth-table with borders
+--+---+
|+.|0 1|
+--+---+
|0 |0 1|
|1 |1 1|
+--+---+
   +. table i.13        NB. table defaults x to: y
+--+-----------------------------+
|+.| 0 1 2 3 4 5 6 7 8 9 10 11 12|
+--+-----------------------------+
| 0| 0 1 2 3 4 5 6 7 8 9 10 11 12|
| 1| 1 1 1 1 1 1 1 1 1 1  1  1  1|
| 2| 2 1 2 1 2 1 2 1 2 1  2  1  2|
| 3| 3 1 1 3 1 1 3 1 1 3  1  1  3|
| 4| 4 1 2 1 4 1 2 1 4 1  2  1  4|
| 5| 5 1 1 1 1 5 1 1 1 1  5  1  1|
| 6| 6 1 2 3 2 1 6 1 2 3  2  1  6|
| 7| 7 1 1 1 1 1 1 7 1 1  1  1  1|
| 8| 8 1 2 1 4 1 2 1 8 1  2  1  4|
| 9| 9 1 1 3 1 1 3 1 1 9  1  1  3|
|10|10 1 2 1 2 5 2 1 2 1 10  1  2|
|11|11 1 1 1 1 1 1 1 1 1  1 11  1|
|12|12 1 2 3 4 1 6 1 4 3  2  1 12|
+--+-----------------------------+

**** Common uses ****
To form a conditional statement
if. (0=#y) +. (y=0) do.
  ...
Note that both sides of x +. y are always evaluated. There is no primitive that suppresses evaluation of one side if the other side produces 1.
To test if x and y are relatively-prime (result will be 1 if so)
   12 +. 20     NB. factor 4 is the largest both numbers share (GCD)
4
   21 +. 20     NB. both numbers are composite, but co-prime (no common prime factors)
1

**** More Information ****
Or_video
**** Related primitives ****
Not-Or (x +: y), LCM_(And) (x *. y), Not-And (x *: y), Not (-. y), Boolean_Functions (m b.)

**** Use These Combinations ****
Combinations using x +. y that have exceptionally_good_performance include:
                                                                               Type;                                                                                                                             Variants;                  Benefits;
               What It Does                                                 Precisions;                               Syntax      Primitives permitted in place of f                                            Restrictions                Bug Warnings
                                                                               Ranks
                               Permitted: Boolean, integer, floating point, byte, symbol (not unicode).                                                              Permitted: (f!:0) (parentheses obligatory!) to force exact comparison.                             Avoids computing entire  x f y
      Is  x f y true anywhere?                                                                          x ([: +./ f) y x +./@:f y = ~: < <: > >: e. E.
                                               x and y need not be the same precision.                                                                                        J recognizes FLO only if f returns an atom or list.           Bug warning: if f is e. it does (,@e.) rather than e. regardless of ranks of arguments
                                             Type;                                    Variants;        Benefits;
                       What it does       Precisions;       Syntax                   Restrictions      Bug Warnings
                                             Ranks
      Do any cells of y match an m-item?                 +./@e.&m y                                    Bug warning: it does (,@e.) rather than e.
          Boolean reductions on infixes      Boolean       x +./\ y                x positive          much faster than alternatives
                                                                             *. = ~: in place of +.
        Boolean reductions on partitions     Boolean       x +//. y   = <. >. +. * *. ~: in place of + avoids building argument cells
                                                      x ~://.@(*./) y
      Polynomial Multiplication (Boolean)    Boolean  x ~://.@(+./) y                                  avoids building argument cells
                                                      x +//.@(*./) y
                                                      x +//.@(+./) y
      Boolean reductions along diagonals     Boolean        +.//. y   *. = ~: < <: > >: in place of +. avoids building argument cells


Retrieved from "https://code.jsoftware.com/mediawiki/index.php?title=Vocabulary/plusdot&oldid=27813"
Category:
    * Voc
***** Navigation menu *****
**** Personal tools ****
    * Log_in
**** Namespaces ****
    * Page
    * Discussion
??
**** Variants ****
**** Views ****
    * Read
    * View_source
    * View_history
??
**** More ****
**** Search ****
[Unknown INPUT type][Search][Go]
**** Navigation ****
    * New_Users
    * Guides
    * NuVoc
    * System
    * Showcase
    * Library
    * Community
    * Recent_changes
    * Random_page
    * J_wiki_search
**** Tools ****
    * What_links_here
    * Related_changes
    * Special_pages
    * Printable_version
    * Permanent_link
    * Page_information
    * Cite_this_page
    * This page was last edited on 17 January 2020, at 00:35.
    * About_J_Wiki
    * [Powered_by_MediaWiki]
