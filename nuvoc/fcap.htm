<!DOCTYPE html>
<html class="client-nojs" lang="en" dir="ltr">
<head>
<meta charset="UTF-8"/>
<title>Vocabulary/fcap - J Wiki</title>
<script>document.documentElement.className = document.documentElement.className.replace( /(^|\s)client-nojs(\s|$)/, "$1client-js$2" );</script>
<script>(window.RLQ=window.RLQ||[]).push(function(){mw.config.set({"wgCanonicalNamespace":"","wgCanonicalSpecialPageName":false,"wgNamespaceNumber":0,"wgPageName":"Vocabulary/fcap","wgTitle":"Vocabulary/fcap","wgCurRevisionId":30677,"wgRevisionId":30677,"wgArticleId":8878,"wgIsArticle":true,"wgIsRedirect":false,"wgAction":"view","wgUserName":null,"wgUserGroups":["*"],"wgCategories":[],"wgBreakFrames":false,"wgPageContentLanguage":"en","wgPageContentModel":"wikitext","wgSeparatorTransformTable":["",""],"wgDigitTransformTable":["",""],"wgDefaultDateFormat":"dmy","wgMonthNames":["","January","February","March","April","May","June","July","August","September","October","November","December"],"wgMonthNamesShort":["","Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"wgRelevantPageName":"Vocabulary/fcap","wgRelevantArticleId":8878,"wgRequestId":"a0537fe47d29e17b6125e8bc","wgIsProbablyEditable":false,"wgRelevantPageIsProbablyEditable":false,"wgRestrictionEdit":[],"wgRestrictionMove":[],"wgCategoryTreePageCategoryOptions":"{\"mode\":0,\"hideprefix\":20,\"showcount\":true,\"namespaces\":false}","wgMediaViewerOnClick":true,"wgMediaViewerEnabledByDefault":true,"wgWikiEditorEnabledModules":[]});mw.loader.state({"site.styles":"ready","noscript":"ready","user.styles":"ready","user":"ready","site":"ready","user.options":"ready","user.tokens":"loading","mediawiki.legacy.shared":"ready","mediawiki.legacy.commonPrint":"ready","mediawiki.sectionAnchor":"ready","mediawiki.skinning.interface":"ready","skins.vector.styles":"ready"});mw.loader.implement("user.tokens@1sqk3u2",function($,jQuery,require,module){/*@nomin*/mw.user.tokens.set({"editToken":"+\\","patrolToken":"+\\","watchToken":"+\\","csrfToken":"+\\"});
});mw.loader.load(["mediawiki.page.startup","mediawiki.user","mediawiki.hidpi","mediawiki.page.ready","mediawiki.toc","mediawiki.searchSuggest","mmv.head","mmv.bootstrap.autostart","skins.vector.js"]);});</script>
<link rel="stylesheet" href="/mediawiki/load.php?debug=false&amp;lang=en&amp;modules=mediawiki.legacy.commonPrint%2Cshared%7Cmediawiki.sectionAnchor%7Cmediawiki.skinning.interface%7Cskins.vector.styles&amp;only=styles&amp;skin=vector"/>
<script async="" src="/mediawiki/load.php?debug=false&amp;lang=en&amp;modules=startup&amp;only=scripts&amp;skin=vector"></script>
<meta name="ResourceLoaderDynamicStyles" content=""/>
<link rel="stylesheet" href="/mediawiki/load.php?debug=false&amp;lang=en&amp;modules=site.styles&amp;only=styles&amp;skin=vector"/>
<meta name="generator" content="MediaWiki 1.31.0"/>
<link rel="shortcut icon" href="/favicon.ico"/>
<link rel="search" type="application/opensearchdescription+xml" href="/mediawiki/opensearch_desc.php" title="J Wiki (en)"/>
<link rel="EditURI" type="application/rsd+xml" href="https://code.jsoftware.com/mediawiki/api.php?action=rsd"/>
<link rel="alternate" type="application/atom+xml" title="J Wiki Atom feed" href="/mediawiki/index.php?title=Special:RecentChanges&amp;feed=atom"/>
<!--[if lt IE 9]><script src="/mediawiki/load.php?debug=false&amp;lang=en&amp;modules=html5shiv&amp;only=scripts&amp;skin=vector&amp;sync=1"></script><![endif]-->
</head>
<body class="mediawiki ltr sitedir-ltr mw-hide-empty-elt ns-0 ns-subject page-Vocabulary_fcap rootpage-Vocabulary skin-vector action-view">		<div id="mw-page-base" class="noprint"></div>
		<div id="mw-head-base" class="noprint"></div>
		<div id="content" class="mw-body" role="main">
			<a id="top"></a>
			<div class="mw-indicators mw-body-content">
</div>
<h1 id="firstHeading" class="firstHeading" lang="en">Vocabulary/fcap</h1>			<div id="bodyContent" class="mw-body-content">
				<div id="siteSub" class="noprint">From J Wiki</div>				<div id="contentSub"><span class="subpages">&lt; <a href="/wiki/Vocabulary" class="mw-redirect" title="Vocabulary">Vocabulary</a></span></div>
								<div id="jump-to-nav" class="mw-jump">
					Jump to:					<a href="#mw-head">navigation</a>, 					<a href="#p-search">search</a>
				</div>
				<div id="mw-content-text" lang="en" dir="ltr" class="mw-content-ltr"><div class="mw-parser-output"><p><small>
<a href="/wiki/Vocabulary/hcapdot" title="Vocabulary/hcapdot">&gt;&gt;</a>
<a href="/wiki/Vocabulary/fdot" title="Vocabulary/fdot">&lt;&lt;</a> <tt>&#160;</tt>
<a href="/wiki/NuVoc" title="NuVoc">Back to: Vocabulary</a>
</small>
</p><p><span id="monadic"></span>
</p>
<dl><dd><table class="wikitable">

<tbody><tr>
<td style="background:#eeffcc; font-size: 18pt;"><tt>u F:. v</tt>
</td>
<td style="font-weight: bold; font-size: 18pt;">Fold Multiple Forward
</td>
<td style="font-weight: bold; font-size: 18pt;">Conjunction
</td></tr></tbody></table></dd></dl>
<dl><dd><table class="wikitable">

<tbody><tr>
<td style="background:#eeffcc; font-size: 18pt;"><tt>u F:: v</tt>
</td>
<td style="font-weight: bold; font-size: 18pt;">Fold Multiple Reverse
</td>
<td style="font-weight: bold; font-size: 18pt;">Conjunction
</td></tr></tbody></table></dd></dl>
<dl><dd><table class="wikitable">

<tbody><tr>
<td style="background:#eeffcc; font-size: 18pt;"><tt>u F: v</tt>
</td>
<td style="font-weight: bold; font-size: 18pt;">Fold Multiple
</td>
<td style="font-weight: bold; font-size: 18pt;">Conjunction
</td></tr></tbody></table></dd></dl>
<p><br />
</p>
<dl><dd><table class="wikitable">

<tbody><tr>
<td style="background:#eeffcc; font-size: 18pt;"><tt>u F.. v</tt>
</td>
<td style="font-weight: bold; font-size: 18pt;">Fold Single Forward
</td>
<td style="font-weight: bold; font-size: 18pt;">Conjunction
</td></tr></tbody></table></dd></dl>
<dl><dd><table class="wikitable">

<tbody><tr>
<td style="background:#eeffcc; font-size: 18pt;"><tt>u F.: v</tt>
</td>
<td style="font-weight: bold; font-size: 18pt;">Fold Single Reverse
</td>
<td style="font-weight: bold; font-size: 18pt;">Conjunction
</td></tr></tbody></table></dd></dl>
<dl><dd><table class="wikitable">

<tbody><tr>
<td style="background:#eeffcc; font-size: 18pt;"><tt>u F. v</tt>
</td>
<td style="font-weight: bold; font-size: 18pt;">Fold Single
</td>
<td style="font-weight: bold; font-size: 18pt;">Conjunction
</td></tr></tbody></table></dd></dl>
<p><br />
<big><b>In Release 9.02,  Fold was modified to execute <tt>v</tt> before <tt>u</tt>, which is the reverse of what Release 9.01 did.  This page describes 9.02 and later.</b></big>
<br />
</p>
<hr />
<p><b>Fold</b> generates a <a rel="nofollow" class="external text" href="https://en.wikipedia.org/wiki/Sequence">sequence</a> defined by a <a rel="nofollow" class="external text" href="https://en.wikipedia.org/wiki/Recurrence_relation">recurrence relation</a>.
</p><p><small><b>Fold</b> is the collective name given to the six primitives &#160;<tt>F.. F.: F. F:. F:: F: </tt> </small>
</p>
<blockquote><p><a href="/wiki/File:Information.png" class="image"><img alt="Information.png" src="/mediawiki/images/5/54/Information.png" width="32" height="32" data-file-width="32" data-file-height="32" /></a> All members of the <b>Fold</b> family are best understood as variants of one master conjunction: <b>Fold Multiple Forward</b> <tt>(F:.)</tt>. Therefore we will focus on this conjunction and base our code samples on it.
</p></blockquote>
<hr />
<div id="toc" class="toc"><div class="toctitle" lang="en" dir="ltr"><h2>Contents</h2></div>
<ul>
<li class="toclevel-1 tocsection-1"><a href="#Why_not_just_use_a_loop.3F"><span class="tocnumber">1</span> <span class="toctext">Why not just use a loop?</span></a></li>
<li class="toclevel-1 tocsection-2"><a href="#How_should_I_define_u_and_v.3F"><span class="tocnumber">2</span> <span class="toctext">How should I define u and v?</span></a></li>
<li class="toclevel-1 tocsection-3"><a href="#How_should_I_specify_y.3F"><span class="tocnumber">3</span> <span class="toctext">How should I specify y?</span></a>
<ul>
<li class="toclevel-2 tocsection-4"><a href="#Limited_vs_unlimited"><span class="tocnumber">3.1</span> <span class="toctext">Limited vs unlimited</span></a></li>
<li class="toclevel-2 tocsection-5"><a href="#Single_vs_Multiple"><span class="tocnumber">3.2</span> <span class="toctext">Single vs Multiple</span></a></li>
</ul>
</li>
<li class="toclevel-1 tocsection-6"><a href="#How_should_I_specify_x.3F"><span class="tocnumber">4</span> <span class="toctext">How should I specify x?</span></a>
<ul>
<li class="toclevel-2 tocsection-7"><a href="#x_in_unlimited_folds"><span class="tocnumber">4.1</span> <span class="toctext">x in unlimited folds</span></a></li>
<li class="toclevel-2 tocsection-8"><a href="#x_in_Forward_and_Reverse_Folds"><span class="tocnumber">4.2</span> <span class="toctext">x in Forward and Reverse Folds</span></a></li>
</ul>
</li>
<li class="toclevel-1 tocsection-9"><a href="#Which_primitive_should_I_use.3F"><span class="tocnumber">5</span> <span class="toctext">Which primitive should I use?</span></a></li>
<li class="toclevel-1 tocsection-10"><a href="#Common_uses"><span class="tocnumber">6</span> <span class="toctext">Common uses</span></a>
<ul>
<li class="toclevel-2 tocsection-11"><a href="#1._Apply_a_given_recurrence_relation_to_a_list_of_numbers_to_yield_a_list_of_the_same_size"><span class="tocnumber">6.1</span> <span class="toctext">1. Apply a given recurrence relation to a list of numbers to yield a list of the same size</span></a></li>
<li class="toclevel-2 tocsection-12"><a href="#2._Apply_a_given_recurrence_relation_to_a_list_of_numbers_to_yield_the_final_result_.28an_integer_atom.29"><span class="tocnumber">6.2</span> <span class="toctext">2. Apply a given recurrence relation to a list of numbers to yield the final result (an integer atom)</span></a></li>
<li class="toclevel-2 tocsection-13"><a href="#3._Build_a_sequence_of_any_desired_length_from_a_single_starting_value"><span class="tocnumber">6.3</span> <span class="toctext">3. Build a sequence of any desired length from a single starting value</span></a></li>
<li class="toclevel-2 tocsection-14"><a href="#4._Simulate_the_trajectory_of_a_falling_object"><span class="tocnumber">6.4</span> <span class="toctext">4. Simulate the trajectory of a falling object</span></a></li>
</ul>
</li>
<li class="toclevel-1 tocsection-15"><a href="#More_Information"><span class="tocnumber">7</span> <span class="toctext">More Information</span></a></li>
</ul>
</div>

<h3><span id="Why_not_just_use_a_loop?"></span><span class="mw-headline" id="Why_not_just_use_a_loop.3F">Why not just use a loop?</span></h3>
<p>In Basic, Python and C/C++, you'd use a loop for the things <b>Fold</b> does.
</p><p>J has <a rel="nofollow" class="external text" href="https://www.jsoftware.com/help/dictionary/ctrl.htm">looping constructs</a> too, notably <tt>while.</tt> and <tt>for.</tt> . But they are slow, cumbersome, and lack power. You feel this lack of power most when designing loops to save executing wasted code by use of <tt>break.</tt>, <tt>continue.</tt>, <tt>try.</tt> and <tt>throw.</tt>.
The objective of J is to let you work on entire arrays with powerful flexible verbs, avoiding the need to map-out buggy complicated flow-of-control using blunt tools. See: <a href="/wiki/Vocabulary/Loopless" title="Vocabulary/Loopless">Loopless programming explained</a>.
</p><p><b>Fold</b> furthers this objective. It hides the complexity of optimized flow-of-control, implementing it in native code. This allows you to focus on designing two verbs <tt>u</tt> and <tt>v</tt> to implement your <a rel="nofollow" class="external text" href="https://en.wikipedia.org/wiki/Recurrence_relation">recurrence relation</a>.
</p>
<hr />
<h3><span id="How_should_I_define_u_and_v?"></span><span class="mw-headline" id="How_should_I_define_u_and_v.3F">How should I define <tt>u</tt> and <tt>v</tt>?</span></h3>
<p>The <a href="/wiki/Vocabulary/Glossary#Operand" title="Vocabulary/Glossary">operands</a> <tt>u</tt> and <tt>v</tt> together specify the <a rel="nofollow" class="external text" href="https://en.wikipedia.org/wiki/Recurrence_relation">recurrence relation</a> that generates the result.
</p>
<ul><li>Operand <tt>v</tt> implements the mathematical recurrence relation, building a notional <b>underlying sequence</b> to which <tt>u</tt> <i>does not contribute</i>.</li>
<li>Operand <tt>u</tt> processes each term of the <b>underlying sequence</b> to build the returned result.</li></ul>
<p><small>If you don't need the returned result to differ from the underlying sequence generated by <tt>v</tt> then set: <tt>u=:]</tt> </small>
</p><p><small>If you need only the last element of the sequence, use the <b>Fold Single</b> family</small>
</p><p><i><b>This diagram</b></i> shows the dataflow from the x- and y-arguments of <b>Fold</b> to the returned noun:
<br /><a href="/wiki/File:Nuvoc-fold-diagram-2.jpg" class="image"><img alt="Nuvoc-fold-diagram-2.jpg" src="/mediawiki/images/8/84/Nuvoc-fold-diagram-2.jpg" width="528" height="870" data-file-width="528" data-file-height="870" /></a>
<br /><small>
</small></p><small><ul><li><i>y0, y1, y2, y3</i> — the items of list <tt>y</tt></li>
<li><tt>v</tt> (ringed) — the mappings defined by each call of verb <tt>v</tt></li>
<li><tt>u</tt> (ringed) — the mappings defined by each call of verb <tt>u</tt></li>
<li><i>v0, v1, v2, v3</i> — the notional <b>underlying sequence</b>, comprising the values returned by each call of verb <tt>v</tt> applied to <tt>x</tt> and items <i>y0, y1, y2, y3</i></li>
<li><i>u0, u1, u2, u3</i> — the list that actually goes into the result of the fold, comprising the values returned by each call of verb: <tt>u</tt> applied to <i>v0, v1, v2, v3</i> .</li></ul></small><small></small><p><small></small><br />
</p><p><b>Fold</b> allows you to avoid needless computation and data storage. Improve the efficiency of your code like this
</p>
<ul><li>If you don't need the result item from each intermediate iteration, use <b>Fold Single…</b> not <b>Fold Multiple…</b></li>
<li>Call the primitive dyad <a href="/wiki/Vocabulary/zcapco" title="Vocabulary/zcapco">Terminate Fold</a> <tt>(Z:)</tt> within <tt>u</tt> or <tt>v</tt> to suppress the creation of redundant data as your code detects the opportunity for it. Use the x-arguments: _1, 0 or 1, which don't abort <b>Fold</b> itself, but only halt individual iterations to return an abbreviated but still valid result.</li>
<li>For many purposes, &#160;<tt>u=:]</tt> will suffice. This returns the <b>underlying sequence</b> unchanged, viz. the list of intermediate values passed from each call of <tt>v</tt> to the next. But if you don't need this list as it stands, design <tt>u</tt> to keep only what data you need, in the format you need it. <a href="#trajectory">See a code example here</a> which does exactly this in an extreme way.</li></ul>
<hr />
<h3><span id="How_should_I_specify_y?"></span><span class="mw-headline" id="How_should_I_specify_y.3F">How should I specify <tt>y</tt>?</span></h3>
<h4><span class="mw-headline" id="Limited_vs_unlimited">Limited vs unlimited</span></h4>
<p>The <b>Fold Forward</b> and <b>Fold Reverse</b> primitives (called <i><b>limited folds</b></i>)treat <tt>y</tt> as a list of candidate arguments for <tt>v</tt>, and generate an underlying sequence with one fewer item than <tt>y</tt> with monadic fold.
</p><p><small>One element of the sequence is produced for each application of <tt>v</tt>.  The first application of <tt>v</tt> consumes 2 items of <tt>y</tt>.</small>
</p>
<ul><li><tt>F:.</tt>	Fold Multiple Forward</li>
<li><tt>F::</tt>	Fold Multiple Reverse</li>
<li><tt>F..</tt>	Fold Single Forward</li>
<li><tt>F.:</tt>	Fold Single Reverse</li></ul>
<p><span id="unlimited"></span>
The other Folds (called <i><b>unlimited folds</b></i>) operate on <tt>y</tt> in its entirety and generate an underlying sequence of <i><b>unlimited length</b></i>
</p>
<ul><li><tt>F.</tt>	Fold Single</li>
<li><tt>F:</tt>	Fold Multiple</li></ul>
<p>Therefore <i><b>you must call</b></i> <a href="/wiki/Vocabulary/zcapco" title="Vocabulary/zcapco">Terminate Fold</a> <tt>(Z:)</tt> within the body of either <tt>u</tt> or <tt>v</tt> in order to halt the execution of (unlimited) <b>Fold</b>.
</p><p>When experimenting with <tt>F.</tt> or <tt>F:</tt>, it is wise to <a href="#safetycount">include (<tt>_3 Z: n</tt>)</a> to force termination after a set number of iterations.
</p>
<h4><span class="mw-headline" id="Single_vs_Multiple">Single vs Multiple</span></h4>
<p>Every execution of <tt>u</tt> produces a <i><b><tt>u</tt>-result</b></i>.  If you need only the last of the <tt>u</tt>-results, use a Single Fold.  If you need all the <tt>u</tt>-results, use a Multiple Fold.  Each <tt>u</tt>-result is one item of the overall result.
</p><p>The result of a Single Fold is the same as taking the last item of the corresponding Multiple Fold, <a href="#multifill">usually</a>.
</p>
<hr />
<h3><span id="How_should_I_specify_x?"></span><span class="mw-headline" id="How_should_I_specify_x.3F">How should I specify <tt>x</tt>?</span></h3>
<p>Once you supply <tt>(F:.)</tt> with operands <tt>u</tt> and <tt>v</tt>, the resulting verb <tt>(u F:.v)</tt> (call it <tt>myFold</tt>) is <a href="/wiki/Vocabulary/cou" title="Vocabulary/cou">Monad-Dyad</a>.
This raises the question: how should <b>Dyad</b> be used, if at all?
</p>
<h4><span class="mw-headline" id="x_in_unlimited_folds"><tt>x</tt> in <a href="#unlimited">unlimited folds</a></span></h4>
<p>In unlimited Folds (<tt>F.</tt> and <tt>F:</tt>) the <tt>x</tt> argument (if present) is applied to every execution of <tt>v</tt> . Think of it as supplying unchanging control information to the Fold.
</p>
<h4><span class="mw-headline" id="x_in_Forward_and_Reverse_Folds"><tt>x</tt> in Forward and Reverse Folds</span></h4>
<p>In contrast, for folds that process items of <tt>y</tt>, the sole purpose of <tt>x</tt> is to supply the y-argument to the <i>first</i> call of <tt>v</tt>.
</p><p><small>In other words, it provides an <i>initial value</i> for the whole series of iterations.</small>
</p><p>Each subsequent call of <tt>v</tt> takes the output of the previous call for its y-argument.
If <tt>x</tt> is absent then <b>Monad</b> <tt>myFold</tt> uses the first item of <tt>y</tt> instead, which then stops being logically part of <tt>y</tt>.
</p><p>The upshot is that these two phrases always return the same result – <i>provided <tt>x</tt> is a valid item of <tt>y</tt>:</i>
</p>
<pre>   x u F:. v y     NB. Dyad
     u F:. v x,y   NB. Monad
</pre>
<p><small>where <tt>F:.</tt> can be replaced by <tt>F::</tt>.  The principle applies to reverse folds as well, but then the monad would be <tt>u F:. v y,x</tt></small>
</p><p>The disadvantage of the second phrase, <b>Monad</b>, is that the <a href="/wiki/Vocabulary/Glossary#Type" title="Vocabulary/Glossary">types</a> or <a href="/wiki/Vocabulary/Glossary#Shape" title="Vocabulary/Glossary">shapes</a> of <tt>x</tt> and <tt>y</tt> may be incompatible, making it undesirable or even illegal to form <tt>x,y</tt> .
</p><p><small><b>Example:</b> <tt>y</tt> may be hard-coded as <tt>i.n</tt> (for some integer <tt>n</tt>) but <tt>x</tt> may represent a given choice of starting condition and may have any <a href="/wiki/Vocabulary/Glossary#Type" title="Vocabulary/Glossary">type</a>. Even if <tt>x</tt> and <tt>y</tt> are type-compatible, <b>Dyad</b> is better because it avoids the computational expense of forming <tt>(x,y)</tt> especially if <tt>y</tt> is large and low-precision.</small>
</p>
<hr />
<h3><span id="Which_primitive_should_I_use?"></span><span class="mw-headline" id="Which_primitive_should_I_use.3F">Which primitive should I use?</span></h3>
<p>To choose which primitive to use, read the <a href="/wiki/Vocabulary/Glossary#Inflection" title="Vocabulary/Glossary">inflections</a> as follows:
</p>
<ul><li>The 3 primitives: <b>Fold Multiple *</b> <tt>(F:…)</tt> return the whole sequence.</li>
<li>The 3 primitives: <b>Fold Single *</b> <tt>(F.…)</tt> return only the last term (of the same sequence).</li>
<li>The 2 primitives: <b>Fold * Forward</b> <tt>(F….)</tt> process <tt>y</tt> left-to-right. (C/f <a href="/wiki/Vocabulary/idot#dyadic" title="Vocabulary/idot">IndexOf<tt>(i.)</tt></a>.)</li>
<li>The 2 primitives: <b>Fold * Reverse</b> <tt>(F…:)</tt> process <tt>y</tt> right-to-left. (C/f <a href="/wiki/Vocabulary/ico#dyadic" title="Vocabulary/ico">IndexOfLast <tt>(i:)</tt></a>.)</li></ul>
<p>Mnemonically, the inflections are <tt>F[single|multiple][forward|backward|neither]</tt> where
</p>
<ul><li>in the first character, <tt>.</tt> (one dot) means 'one result item' while <tt>:</tt> (multiple dots) means 'multiple result items' - reminiscent of <tt>#.</tt> and <tt>#:</tt></li>
<li>in the second character, <tt>.</tt> means 'from the beginning' while <tt>:</tt> means 'from the end' - reminiscent of <tt>{.</tt> and <tt>{:</tt> - and omitted means 'neither - the iteration is not by items'</li></ul>
<hr />
<h3><span class="mw-headline" id="Common_uses">Common uses</span></h3>
<h4><span class="mw-headline" id="1._Apply_a_given_recurrence_relation_to_a_list_of_numbers_to_yield_a_list_of_the_same_size">1. Apply a given recurrence relation to a list of numbers to yield a list of the same size</span></h4>
<pre>   v=: dyad define
z=. y + 0.01
z [smoutput x&#160;; 'v'&#160;; y&#160;; '--&gt;'&#160;; z
)

   u=: monad define
z=. -y
z [smoutput '    u'&#160;; y&#160;; '--&gt;'&#160;; z
)

   x=: 100
   ]y=: x, 0.1 + i.4
100 0.1 1.1 2.1 3.1

   ]z=: u F:. v y   NB. multiple forward
┌───┬─┬───┬───┬──────┐
│0.1│v│100│--&gt;│100.01│
└───┴─┴───┴───┴──────┘
┌─────┬──────┬───┬───────┐
│    u│100.01│--&gt;│_100.01│
└─────┴──────┴───┴───────┘
┌───┬─┬──────┬───┬──────┐
│1.1│v│100.01│--&gt;│100.02│
└───┴─┴──────┴───┴──────┘
┌─────┬──────┬───┬───────┐
│    u│100.02│--&gt;│_100.02│
└─────┴──────┴───┴───────┘
┌───┬─┬──────┬───┬──────┐
│2.1│v│100.02│--&gt;│100.03│
└───┴─┴──────┴───┴──────┘
┌─────┬──────┬───┬───────┐
│    u│100.03│--&gt;│_100.03│
└─────┴──────┴───┴───────┘
┌───┬─┬──────┬───┬──────┐
│3.1│v│100.03│--&gt;│100.04│
└───┴─┴──────┴───┴──────┘
┌─────┬──────┬───┬───────┐
│    u│100.04│--&gt;│_100.04│
└─────┴──────┴───┴───────┘
_100.01 _100.02 _100.03 _100.04

   z-: x u F:. v }.y  NB. Try the equivalent dyad phrase
...identical boxed-trace omitted...
1
</pre>
<p><br />
</p>
<h4><span id="2._Apply_a_given_recurrence_relation_to_a_list_of_numbers_to_yield_the_final_result_(an_integer_atom)"></span><span class="mw-headline" id="2._Apply_a_given_recurrence_relation_to_a_list_of_numbers_to_yield_the_final_result_.28an_integer_atom.29">2. Apply a given recurrence relation to a list of numbers to yield the final result (an integer atom)</span></h4>
<pre>   ]z=: u F.. v y   NB. single forward
┌───┬─┬───┬───┬──────┐
│0.1│v│100│--&gt;│100.01│
└───┴─┴───┴───┴──────┘
┌─────┬──────┬───┬───────┐
│    u│100.01│--&gt;│_100.01│
└─────┴──────┴───┴───────┘
┌───┬─┬──────┬───┬──────┐
│1.1│v│100.01│--&gt;│100.02│
└───┴─┴──────┴───┴──────┘
┌─────┬──────┬───┬───────┐
│    u│100.02│--&gt;│_100.02│
└─────┴──────┴───┴───────┘
┌───┬─┬──────┬───┬──────┐
│2.1│v│100.02│--&gt;│100.03│
└───┴─┴──────┴───┴──────┘
┌─────┬──────┬───┬───────┐
│    u│100.03│--&gt;│_100.03│
└─────┴──────┴───┴───────┘
┌───┬─┬──────┬───┬──────┐
│3.1│v│100.03│--&gt;│100.04│
└───┴─┴──────┴───┴──────┘
┌─────┬──────┬───┬───────┐
│    u│100.04│--&gt;│_100.04│
└─────┴──────┴───┴───────┘
_100.04

   z-: {:(u F:. v y)
...identical boxed-trace omitted...
1
</pre>
<p><b>Notes</b>
</p>
<ul><li>Define <tt>u, v, x, y </tt> as in 1.</li>
<li>The boxed entries generated by <tt>v</tt> are the underlying sequence. Observe they are the same as in 1.</li>
<li>Likewise the boxed entries generated by <tt>u</tt> are the same as in 1.</li>
<li><tt> (u F.. v y) -: {: u F:. v y </tt></li></ul>
<p><b>Things to try</b>
</p>
<ul><li>Hide the boxed (trace) entries by commenting-out the <tt>smoutput</tt> lines in the bodies of <tt>u</tt> and <tt>v</tt>.</li>
<li>Does the above monad/dyad identity work with…? <tt> (u F.: v y) -: {: u F:: v y </tt></li></ul>
<p><br />
</p>
<h4><span class="mw-headline" id="3._Build_a_sequence_of_any_desired_length_from_a_single_starting_value">3. Build a sequence of any desired length from a single starting value</span></h4>
<pre>   COUNT=: 5   NB. 1+ max length of generated sequence

   v=: monad define
wd'msgs'   NB. force pending smoutputs to appear in Term window.
_2 Z: -.*COUNT=:COUNT-1   NB. _2 means: terminate Fold altogether
z=. y + 1
z [smoutput '   v'&#160;; y&#160;; '--&gt;'&#160;; z
)

   u=: monad define
z=. -y
z [smoutput '   u'&#160;; y&#160;; '--&gt;'&#160;; z
)

   y=: 100

   u F: v y
┌────┬───┬───┬───┐
│   v│100│--&gt;│101│
└────┴───┴───┴───┘
┌────┬───┬───┬────┐
│   u│101│--&gt;│_101│
└────┴───┴───┴────┘
┌────┬───┬───┬───┐
│   v│101│--&gt;│102│
└────┴───┴───┴───┘
┌────┬───┬───┬────┐
│   u│102│--&gt;│_102│
└────┴───┴───┴────┘
┌────┬───┬───┬───┐
│   v│102│--&gt;│103│
└────┴───┴───┴───┘
┌────┬───┬───┬────┐
│   u│103│--&gt;│_103│
└────┴───┴───┴────┘
┌────┬───┬───┬───┐
│   v│103│--&gt;│104│
└────┴───┴───┴───┘
┌────┬───┬───┬────┐
│   u│104│--&gt;│_104│
└────┴───┴───┴────┘
_101 _102 _103 _104
</pre>
<p><b>Notes</b>
</p>
<ul><li>y-argument of <tt>Z:</tt> must be a boolean.</li>
<li><tt>y=0</tt> is no-op.</li>
<li><tt>y=1</tt> causes <tt>Z:</tt> to terminate <b>Fold</b>.</li></ul>
<h4><span class="mw-headline" id="4._Simulate_the_trajectory_of_a_falling_object">4. Simulate the trajectory of a falling object</span></h4>
<p><span id="trajectory"></span>
<span id="safetycount"></span>
</p>
<pre>cocurrent 'base'
require 'plot'
MAXITER=: 50    NB. safety long-stop
S=: 100         NB. height above ground (m) - UPDATED
T=: 0           NB. time at end of current epoch (s) - UPDATED
e=: 0.1         NB. time interval of simulation epoch (s) - CONST
U=: 0           NB. starting velocity (m/s) - CONST
V=: U           NB. velocity at end of current epoch (s) - UPDATED
g=: 9.81        NB. acceleration due to gravity at earth surface (m/s^2) - CONST
mean =: +/&#160;% #  NB. definition of mean - VERB

trajectory=: monad&#160;: 'u F: v y'

v=: monad define
  NB. Trajectory of solid object in free-fall
_3 Z: MAXITER             NB. Stop Fold when there have been too many iterations
_2 Z: S&lt;:0                NB. Stop Fold when object hits the ground
  NB. Recurrence relation is based on free-fall formula: V = U + gt
V=: y + g*e               NB. free-fall: vertical velocity at end of epoch
S=: S - e*mean y,V        NB. free-fall: vertical height at end of epoch
T=: T + e                 NB. time of flight at end of epoch
if. S&lt;:0 do. smoutput '+++ LANDED: T=',":T end.
V return.
)

u=: monad&#160;: 'S'

plot trajectory U
+++ LANDED: T=4.6
</pre>
<p><a href="/wiki/File:Plot-trajectory-Fold.jpg" class="image"><img alt="Plot-trajectory-Fold.jpg" src="/mediawiki/images/3/3d/Plot-trajectory-Fold.jpg" width="481" height="382" data-file-width="481" data-file-height="382" /></a>
</p><p><b>Notes</b>
</p>
<ul><li>The underlying series is computed iteratively by operand: <tt>v</tt></li>
<li>Verb <tt>v</tt> returns current velocity <tt>V</tt> . But we want <tt>S</tt> trajectory, not <tt>V</tt> trajectory. Use operand <tt>u</tt> to return the current value of <tt>S</tt></li>
<li>Original model assumes motion is vertical. But the formulas remain valid even if object has constant horizontal velocity.</li>
<li>By plotting successive epochs horizontally, addon <tt>plot</tt> manufactures a constant horizontal velocity for the falling object, now a projectile.</li>
<li>A more advanced model capable of computing the trajectory of a spacecraft will handle velocity (V) and earth gravity (g) as 2-D or 3-D vectors, g becoming variable and directional. For extreme precision g even needs correction for general relativity, as required in practice for a GPS satellite.</li></ul>
<hr />
<h3><span class="mw-headline" id="More_Information">More Information</span></h3>
<p>1. <tt>Z:</tt> <a href="#trajectory">can appear multiple times</a> during the execution of <tt>u</tt> and <tt>v</tt>.
</p>
<ul><li>If <tt>(_2 Z: 1)</tt> is executed, the Fold terminates immediately returning the most recent result.</li>
<li>If <tt>(_1 Z: 1)</tt> is executed during the execution of <tt>v</tt>, <tt>v</tt> terminates immediately and the next iteration, if there is one, begins with the same right-operand as the previous iteration.  The result is unchanged.</li>
<li>If <tt>(_1 Z: 1)</tt> is executed during the execution of <tt>u</tt>, <tt>u</tt> terminates immediately and the next iteration, if there is one, begins with the result of <tt>v</tt> as the right-operand.  The result is unchanged.</li>
<li>If <tt>(0 Z: 1)</tt> is executed, execution proceeds normally, but when <tt>u</tt> completes the result is unchanged.</li>
<li>If <tt>(1 Z: 1)</tt> is executed, execution proceeds normally, but stops before the next iteration, returning the result incumbent at that time.</li></ul>
<p>When <tt>u</tt> completes, whether it contributes to the result depends on whether <tt>(0 Z: 1)</tt> was executed.  <tt>Z:</tt>left-arguments of _2 and _1 cause <tt>u</tt> not to be completed for that iteration.  When the next iteration is ready to start, execution terminates if <tt>(1 Z: 1)</tt> was executed.
</p><p>2. For Forward and Reverse Folds, the maximum number of iterations is (<tt>((#y)-1)</tt> plus 1 if <tt>x</tt> is specified).  If this value is _1 or 0, there are not enough items to apply <tt>v</tt> even once.  In this case <tt>u@(v/)</tt> will be applied to a empty array (taken from <tt>x</tt> if <tt>x</tt> is given, otherwise from <tt>y</tt>) to produce the <a href="/wiki/Vocabulary/Glossary#Neutral" title="Vocabulary/Glossary">neutral</a> for <tt>v</tt>: the result of Fold Single will be that neutral, while the result of Fold Multiple will be an empty array of 0 items of that neutral.
</p><p>3. Except when a fill-cell has been used, if no execution of <tt>u</tt> has contributed to the final result, <tt>domain error</tt> is returned.
</p><p>4. <span id="multifill"></span>If the <tt>u</tt>-results do not have the same shape, the individual <tt>u</tt>-results are filled to bring them to a common item shape.  In this case the last item of a Fold Multiple might differ from the result of the corresponding Fold Single because of the fill.
</p>
<!-- 
NewPP limit report
Cached time: 20210812081752
Cache expiry: 86400
Dynamic content: false
CPU time usage: 0.032 seconds
Real time usage: 0.034 seconds
Preprocessor visited node count: 117/1000000
Preprocessor generated node count: 202/1000000
Post‐expand include size: 275/2097152 bytes
Template argument size: 217/2097152 bytes
Highest expansion depth: 2/40
Expensive parser function count: 0/100
Unstrip recursion depth: 0/20
Unstrip post‐expand size: 6350/5000000 bytes
-->
<!--
Transclusion expansion time report (%,ms,calls,template)
100.00%    1.516      1 Template:Admon/note
100.00%    1.516      1 -total
-->
</div>
<!-- Saved in parser cache with key my_wiki:pcache:idhash:8878-0!canonical and timestamp 20210812081752 and revision id 30677
 -->
</div>					<div class="printfooter">
						Retrieved from "<a dir="ltr" href="https://code.jsoftware.com/mediawiki/index.php?title=Vocabulary/fcap&amp;oldid=30677">https://code.jsoftware.com/mediawiki/index.php?title=Vocabulary/fcap&amp;oldid=30677</a>"					</div>
				<div id="catlinks" class="catlinks catlinks-allhidden" data-mw="interface"></div>				<div class="visualClear"></div>
							</div>
		</div>
		<div id="mw-navigation">
			<h2>Navigation menu</h2>
			<div id="mw-head">
									<div id="p-personal" role="navigation" class="" aria-labelledby="p-personal-label">
						<h3 id="p-personal-label">Personal tools</h3>
						<ul>
							<li id="pt-login"><a href="/mediawiki/index.php?title=Special:UserLogin&amp;returnto=Vocabulary%2Ffcap" title="You are encouraged to log in; however, it is not mandatory [o]" accesskey="o">Log in</a></li>						</ul>
					</div>
									<div id="left-navigation">
										<div id="p-namespaces" role="navigation" class="vectorTabs" aria-labelledby="p-namespaces-label">
						<h3 id="p-namespaces-label">Namespaces</h3>
						<ul>
							<li id="ca-nstab-main" class="selected"><span><a href="/wiki/Vocabulary/fcap" title="View the content page [c]" accesskey="c">Page</a></span></li><li id="ca-talk"><span><a href="/wiki/Talk:Vocabulary/fcap" rel="discussion" title="Discussion about the content page [t]" accesskey="t">Discussion</a></span></li>						</ul>
					</div>
										<div id="p-variants" role="navigation" class="vectorMenu emptyPortlet" aria-labelledby="p-variants-label">
												<input type="checkbox" class="vectorMenuCheckbox" aria-labelledby="p-variants-label" />
						<h3 id="p-variants-label">
							<span>Variants</span>
						</h3>
						<div class="menu">
							<ul>
															</ul>
						</div>
					</div>
									</div>
				<div id="right-navigation">
										<div id="p-views" role="navigation" class="vectorTabs" aria-labelledby="p-views-label">
						<h3 id="p-views-label">Views</h3>
						<ul>
							<li id="ca-view" class="collapsible selected"><span><a href="/wiki/Vocabulary/fcap">Read</a></span></li><li id="ca-viewsource" class="collapsible"><span><a href="/mediawiki/index.php?title=Vocabulary/fcap&amp;action=edit" title="This page is protected.&#10;You can view its source [e]" accesskey="e">View source</a></span></li><li id="ca-history" class="collapsible"><span><a href="/mediawiki/index.php?title=Vocabulary/fcap&amp;action=history" title="Past revisions of this page [h]" accesskey="h">View history</a></span></li>						</ul>
					</div>
										<div id="p-cactions" role="navigation" class="vectorMenu emptyPortlet" aria-labelledby="p-cactions-label">
						<input type="checkbox" class="vectorMenuCheckbox" aria-labelledby="p-cactions-label" />
						<h3 id="p-cactions-label"><span>More</span></h3>
						<div class="menu">
							<ul>
															</ul>
						</div>
					</div>
										<div id="p-search" role="search">
						<h3>
							<label for="searchInput">Search</label>
						</h3>
						<form action="/mediawiki/index.php" id="searchform">
							<div id="simpleSearch">
								<input type="search" name="search" placeholder="Search J Wiki" title="Search J Wiki [f]" accesskey="f" id="searchInput"/><input type="hidden" value="Special:Search" name="title"/><input type="submit" name="fulltext" value="Search" title="Search the pages for this text" id="mw-searchButton" class="searchButton mw-fallbackSearchButton"/><input type="submit" name="go" value="Go" title="Go to a page with this exact name if it exists" id="searchButton" class="searchButton"/>							</div>
						</form>
					</div>
									</div>
			</div>
			<div id="mw-panel">
				<div id="p-logo" role="banner"><a class="mw-wiki-logo" href="/wiki/Main_Page"  title="Visit the main page"></a></div>
						<div class="portal" role="navigation" id="p-navigation" aria-labelledby="p-navigation-label">
			<h3 id="p-navigation-label">Navigation</h3>
			<div class="body">
								<ul>
					<li id="n-New-Users"><a href="/wiki/Guides/GettingStarted">New Users</a></li><li id="n-Guides"><a href="/wiki/Guides">Guides</a></li><li id="n-NuVoc"><a href="/wiki/NuVoc">NuVoc</a></li><li id="n-System"><a href="/wiki/System">System</a></li><li id="n-Showcase"><a href="/wiki/Showcase">Showcase</a></li><li id="n-Library"><a href="/wiki/Library">Library</a></li><li id="n-Community"><a href="/wiki/Community">Community</a></li><li id="n-Recent-changes"><a href="/wiki/Special:RecentChanges">Recent changes</a></li><li id="n-Random-page"><a href="/wiki/Special:Random">Random page</a></li><li id="n-J-wiki-search"><a href="/wiki/Special:JwikiSearch">J wiki search</a></li>				</ul>
							</div>
		</div>
			<div class="portal" role="navigation" id="p-tb" aria-labelledby="p-tb-label">
			<h3 id="p-tb-label">Tools</h3>
			<div class="body">
								<ul>
					<li id="t-whatlinkshere"><a href="/wiki/Special:WhatLinksHere/Vocabulary/fcap" title="A list of all wiki pages that link here [j]" accesskey="j">What links here</a></li><li id="t-recentchangeslinked"><a href="/wiki/Special:RecentChangesLinked/Vocabulary/fcap" rel="nofollow" title="Recent changes in pages linked from this page [k]" accesskey="k">Related changes</a></li><li id="t-specialpages"><a href="/wiki/Special:SpecialPages" title="A list of all special pages [q]" accesskey="q">Special pages</a></li><li id="t-print"><a href="/mediawiki/index.php?title=Vocabulary/fcap&amp;printable=yes" rel="alternate" title="Printable version of this page [p]" accesskey="p">Printable version</a></li><li id="t-permalink"><a href="/mediawiki/index.php?title=Vocabulary/fcap&amp;oldid=30677" title="Permanent link to this revision of the page">Permanent link</a></li><li id="t-info"><a href="/mediawiki/index.php?title=Vocabulary/fcap&amp;action=info" title="More information about this page">Page information</a></li><li id="t-cite"><a href="/mediawiki/index.php?title=Special:CiteThisPage&amp;page=Vocabulary%2Ffcap&amp;id=30677" title="Information on how to cite this page">Cite this page</a></li>				</ul>
							</div>
		</div>
				</div>
		</div>
				<div id="footer" role="contentinfo">
						<ul id="footer-info">
								<li id="footer-info-lastmod"> This page was last edited on 22 May 2021, at 14:13.</li>
							</ul>
						<ul id="footer-places">
								<li id="footer-places-about"><a href="/wiki/About" title="About">About J Wiki</a></li>
							</ul>
										<ul id="footer-icons" class="noprint">
										<li id="footer-poweredbyico">
						<a href="//www.mediawiki.org/"><img src="/mediawiki/resources/assets/poweredby_mediawiki_88x31.png" alt="Powered by MediaWiki" srcset="/mediawiki/resources/assets/poweredby_mediawiki_132x47.png 1.5x, /mediawiki/resources/assets/poweredby_mediawiki_176x62.png 2x" width="88" height="31"/></a>					</li>
									</ul>
						<div style="clear: both;"></div>
		</div>
		<script>(window.RLQ=window.RLQ||[]).push(function(){mw.config.set({"wgPageParseReport":{"limitreport":{"cputime":"0.032","walltime":"0.034","ppvisitednodes":{"value":117,"limit":1000000},"ppgeneratednodes":{"value":202,"limit":1000000},"postexpandincludesize":{"value":275,"limit":2097152},"templateargumentsize":{"value":217,"limit":2097152},"expansiondepth":{"value":2,"limit":40},"expensivefunctioncount":{"value":0,"limit":100},"unstrip-depth":{"value":0,"limit":20},"unstrip-size":{"value":6350,"limit":5000000},"timingprofile":["100.00%    1.516      1 Template:Admon/note","100.00%    1.516      1 -total"]},"cachereport":{"timestamp":"20210812081752","ttl":86400,"transientcontent":false}}});});</script><script>(window.RLQ=window.RLQ||[]).push(function(){mw.config.set({"wgBackendResponseTime":24});});</script>
	</body>
</html>
