








****** Vocabulary/adot ******
From J Wiki
< Vocabulary
Jump to: navigation, search
>> <<   Back_to:_Vocabulary Thru_to:_Dictionary
      a. Alphabet Noun

The alphabet of the J language — a built-in list of all bytes
i.e. atoms of type: character with byte precision.
   $ a.
256
Bytes 0 to 127 are (mostly) the ASCII_characters.
Bytes in J serve two purposes:
    * To store ASCII characters (using byte indexes 32 to 127)
    * To store 8-bit bytes for interacting with external hardware and software.
Though a. is a simple list, displaying it is a challenge because only half of it contains displayable ASCII characters, and a quarter of the ASCII codes are control characters that mess up the display. See Screen_Output_and_Input for details.
Note: Unicode_characters may be stored in character nouns of unicode precision. Bytes using UTF-8 encoding are not automatically recognized as representing Unicode characters; you must explicitly convert_them_to_unicode_precision using (u:).

**** Common uses ****
1. Find the ASCII code(s) of any letter (or string). This converts from characters to numbers
   a. i. 'A'
65
   a. i. 'AZaz09'
65 90 97 122 48 57
2. Find the letter for a given ASCII code
   65 { a.
A
3. Make lists of the ASCII roman alphabet, upper- and lowercase, plus the number digits
   a. {~ 65+i.26
ABCDEFGHIJKLMNOPQRSTUVWXYZ
   a. {~ 97+i.26
abcdefghijklmnopqrstuvwxyz
   a. {~ 48+i.10
0123456789
See the stdlib verbs: tolower and toupper for their use of this construct.
4. Translate one set of characters to another
   lc =: 'abcdefghijklmnopqrstuvwxyz'
   uc =: 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'
   tolow =: (lc,a.) {~ (uc,a.) i. ]   NB. a. fills in the other characters
   tolow 'Ike Newton'
ike newton
=======================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================
**** Use These Combinations ****
Combinations using  a. y that have exceptionally_good_performance include:
                                     Type;                          Variants;    Benefits;
                 What it does     Precisions;          Syntax      Restrictions  Bug Warnings
                                     Ranks
                                                   u&.(a.&i.) y   (u y) -: u"0 y
      Bitwise operations on bytes      byte   (m b.)/&.(a.&i.) y  m is 16 to 31  avoids conversion to integer
                                              x (m b.)&.(a.&i.) y
=======================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================
CategoryVoc CategoryVocConstant

Retrieved from "https://code.jsoftware.com/mediawiki/index.php?title=Vocabulary/adot&oldid=13431"
***** Navigation menu *****
**** Personal tools ****
    * Log_in
**** Namespaces ****
    * Page
    * Discussion
??
**** Variants ****
**** Views ****
    * Read
    * View_source
    * View_history
??
**** More ****
**** Search ****
[Unknown INPUT type][Search][Go]
**** Navigation ****
    * New_Users
    * Guides
    * NuVoc
    * System
    * Showcase
    * Library
    * Community
    * Recent_changes
    * Random_page
    * J_wiki_search
**** Tools ****
    * What_links_here
    * Related_changes
    * Special_pages
    * Printable_version
    * Permanent_link
    * Page_information
    * Cite_this_page
    * This page was last edited on 19 June 2014, at 03:57.
    * About_J_Wiki
    * [Powered_by_MediaWiki]
