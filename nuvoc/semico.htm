<!DOCTYPE html>
<html class="client-nojs" lang="en" dir="ltr">
<head>
<meta charset="UTF-8"/>
<title>Vocabulary/semico - J Wiki</title>
<script>document.documentElement.className = document.documentElement.className.replace( /(^|\s)client-nojs(\s|$)/, "$1client-js$2" );</script>
<script>(window.RLQ=window.RLQ||[]).push(function(){mw.config.set({"wgCanonicalNamespace":"","wgCanonicalSpecialPageName":false,"wgNamespaceNumber":0,"wgPageName":"Vocabulary/semico","wgTitle":"Vocabulary/semico","wgCurRevisionId":29563,"wgRevisionId":29563,"wgArticleId":3406,"wgIsArticle":true,"wgIsRedirect":false,"wgAction":"view","wgUserName":null,"wgUserGroups":["*"],"wgCategories":["Voc"],"wgBreakFrames":false,"wgPageContentLanguage":"en","wgPageContentModel":"wikitext","wgSeparatorTransformTable":["",""],"wgDigitTransformTable":["",""],"wgDefaultDateFormat":"dmy","wgMonthNames":["","January","February","March","April","May","June","July","August","September","October","November","December"],"wgMonthNamesShort":["","Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"wgRelevantPageName":"Vocabulary/semico","wgRelevantArticleId":3406,"wgRequestId":"c1c69c112951cb48c2a97731","wgIsProbablyEditable":false,"wgRelevantPageIsProbablyEditable":false,"wgRestrictionEdit":[],"wgRestrictionMove":[],"wgCategoryTreePageCategoryOptions":"{\"mode\":0,\"hideprefix\":20,\"showcount\":true,\"namespaces\":false}","wgMediaViewerOnClick":true,"wgMediaViewerEnabledByDefault":true,"wgWikiEditorEnabledModules":[]});mw.loader.state({"site.styles":"ready","noscript":"ready","user.styles":"ready","user":"ready","site":"ready","user.options":"ready","user.tokens":"loading","mediawiki.legacy.shared":"ready","mediawiki.legacy.commonPrint":"ready","mediawiki.sectionAnchor":"ready","mediawiki.skinning.interface":"ready","skins.vector.styles":"ready"});mw.loader.implement("user.tokens@1sqk3u2",function($,jQuery,require,module){/*@nomin*/mw.user.tokens.set({"editToken":"+\\","patrolToken":"+\\","watchToken":"+\\","csrfToken":"+\\"});
});mw.loader.load(["mediawiki.page.startup","mediawiki.user","mediawiki.hidpi","mediawiki.page.ready","mediawiki.searchSuggest","skins.vector.js"]);});</script>
<link rel="stylesheet" href="/mediawiki/load.php?debug=false&amp;lang=en&amp;modules=mediawiki.legacy.commonPrint%2Cshared%7Cmediawiki.sectionAnchor%7Cmediawiki.skinning.interface%7Cskins.vector.styles&amp;only=styles&amp;skin=vector"/>
<script async="" src="/mediawiki/load.php?debug=false&amp;lang=en&amp;modules=startup&amp;only=scripts&amp;skin=vector"></script>
<meta name="ResourceLoaderDynamicStyles" content=""/>
<link rel="stylesheet" href="/mediawiki/load.php?debug=false&amp;lang=en&amp;modules=site.styles&amp;only=styles&amp;skin=vector"/>
<meta name="generator" content="MediaWiki 1.31.0"/>
<link rel="shortcut icon" href="/favicon.ico"/>
<link rel="search" type="application/opensearchdescription+xml" href="/mediawiki/opensearch_desc.php" title="J Wiki (en)"/>
<link rel="EditURI" type="application/rsd+xml" href="https://code.jsoftware.com/mediawiki/api.php?action=rsd"/>
<link rel="alternate" type="application/atom+xml" title="J Wiki Atom feed" href="/mediawiki/index.php?title=Special:RecentChanges&amp;feed=atom"/>
<!--[if lt IE 9]><script src="/mediawiki/load.php?debug=false&amp;lang=en&amp;modules=html5shiv&amp;only=scripts&amp;skin=vector&amp;sync=1"></script><![endif]-->
</head>
<body class="mediawiki ltr sitedir-ltr mw-hide-empty-elt ns-0 ns-subject page-Vocabulary_semico rootpage-Vocabulary skin-vector action-view">		<div id="mw-page-base" class="noprint"></div>
		<div id="mw-head-base" class="noprint"></div>
		<div id="content" class="mw-body" role="main">
			<a id="top"></a>
			<div class="mw-indicators mw-body-content">
</div>
<h1 id="firstHeading" class="firstHeading" lang="en">Vocabulary/semico</h1>			<div id="bodyContent" class="mw-body-content">
				<div id="siteSub" class="noprint">From J Wiki</div>				<div id="contentSub"><span class="subpages">&lt; <a href="/wiki/Vocabulary" class="mw-redirect" title="Vocabulary">Vocabulary</a></span></div>
								<div id="jump-to-nav" class="mw-jump">
					Jump to:					<a href="#mw-head">navigation</a>, 					<a href="#p-search">search</a>
				</div>
				<div id="mw-content-text" lang="en" dir="ltr" class="mw-content-ltr"><div class="mw-parser-output"><p><small>
<a href="/wiki/Vocabulary/number" title="Vocabulary/number">&gt;&gt;</a>
<a href="/wiki/Vocabulary/semidot3" title="Vocabulary/semidot3">&lt;&lt;</a> <tt>&#160;</tt>
<a href="#dyadic">Down to: Dyad</a> <tt>&#160;</tt>
<a href="/wiki/NuVoc" title="NuVoc">Back to: Vocabulary</a>
<a href="http://www.jsoftware.com/help/dictionary/d332.htm" class="extiw" title="jdic:d332">Thru to: Dictionary</a>
</small>
</p><p><span id="monadic"></span>
</p>
<dl><dd><table class="wikitable">

<tbody><tr>
<td style="background:#ddccff; font-size: 18pt;"><tt>;: y</tt>
</td>
<td style="font-weight: bold; font-size: 18pt;">Words
</td></tr></tbody></table></dd></dl>
<p><small>
<a href="/wiki/Vocabulary/RankInfo#rank1varl" title="Vocabulary/RankInfo">Rank 1</a> <i>-- operates on lists of y, producing a list of variable length for each one --</i>
<a href="/wiki/Vocabulary/RankInfoIsImportant" title="Vocabulary/RankInfoIsImportant">WHY IS THIS IMPORTANT?</a>
</small>
</p><p><br />
</p>
<hr />
<p><a href="/wiki/Vocabulary/Glossary#Partition" title="Vocabulary/Glossary">Partitions</a> a <a href="/wiki/Vocabulary/Glossary#String" title="Vocabulary/Glossary">string</a> into <a href="/wiki/Vocabulary/Glossary#Boxed" title="Vocabulary/Glossary">boxed</a> <a href="/wiki/Vocabulary/AET#Word" title="Vocabulary/AET">words</a>
according to J's <a href="/wiki/Vocabulary/Words#WordFormation" title="Vocabulary/Words">rules for word formation</a>.
</p><p><small> In other programming languages, <a href="/wiki/Vocabulary/AET#Word" title="Vocabulary/AET">words</a> are called <b>tokens</b>. </small>
</p>
<pre>  &#160;;: '&lt;;._1'
+-+--+--+
|&lt;|;.|_1|
+-+--+--+
</pre>
<p>Note that an entire <a href="/wiki/Vocabulary/Glossary#Numeric" title="Vocabulary/Glossary">numeric</a> <a href="/wiki/Vocabulary/AET#List" title="Vocabulary/AET">list</a> or a comment is a single <a href="/wiki/Vocabulary/AET#Word" title="Vocabulary/AET">word.</a>
</p><p><small>This matters if you use (<tt>;:</tt>) to tokenize some syntax resembling J but not J</small>
</p>
<pre>   y=: 'Fine, easy as 1 2 3?'
  &#160;;: y
+----+-+----+--+-----+-+
|Fine|,|easy|as|1 2 3|?|
+----+-+----+--+-----+-+

   z=: ' ''s t''=: 3 5'   NB. multiple assignment'
  &#160;;: z
+-----+--+---+-----------------------+
|'s t'|=:|3 5|NB. multiple assignment|
+-----+--+---+-----------------------+
</pre>
<p>Compare this with the action of <a href="/wiki/Vocabulary/AET#Verb" title="Vocabulary/AET">verb</a> <tt>cutopen</tt>
</p><p><small><tt>cutopen</tt> is a 
</small></p><small><ul><li><a rel="nofollow" class="external text" href="http://www.jsoftware.com/help/user/library.htm">Standard Library</a> word(s) residing in the 'z'-locale</li>
<li>Defined in the factory script <tt>stdlib.ijs</tt> which is located in <tt>&#160;~system/main/stdlib.ijs</tt></li>
<li>View the definition(s) in a JQt session by entering: <tt>&#160;open '~system/main/stdlib.ijs'</tt></li></ul></small><small></small><p><small></small>
</p>
<pre>   cutopen y
+-----+----+--+-+-+--+
|Fine,|easy|as|1|2|3?|
+-----+----+--+-+-+--+
</pre>
<hr />
<h3><span class="mw-headline" id="Common_uses">Common uses</span></h3>
<p>1. <a href="/wiki/Vocabulary/Glossary#Partition" title="Vocabulary/Glossary">Partition</a> an <a href="/wiki/Vocabulary/Glossary#Open" title="Vocabulary/Glossary">open</a> <a href="/wiki/Vocabulary/AET#List" title="Vocabulary/AET">list</a> into <a href="/wiki/Vocabulary/Glossary#Boxed" title="Vocabulary/Glossary">boxed</a> <a href="/wiki/Vocabulary/Glossary#String" title="Vocabulary/Glossary">strings</a>
</p>
<pre>  &#160;;: 'alpha bravo charlie'
+-----+-----+-------+
|alpha|bravo|charlie|
+-----+-----+-------+
</pre>
<p>Useful if you are sure J's <a href="/wiki/Vocabulary/AET#Word" title="Vocabulary/AET">word</a> rules will work for your <tt>y</tt>.
</p><p><b>Not recommended</b> for general parsing, because <tt>;:y</tt> signals a J error if the string is ill-formed according to J's rules
</p>
<pre>   ]z =: 'Eugene O''Neill'
Eugene O'Neill
  &#160;;: z
|open quote
|   Eugene O'Neill
</pre>
<p><span id="dyadic"></span>
</p>
<hr />
<dl><dd><table class="wikitable">

<tbody><tr>
<td style="background:#ddccff; font-size: 18pt;"><tt>x&#160;;: y</tt>
</td>
<td style="font-weight: bold; font-size: 18pt;">Sequential Machine
</td></tr></tbody></table></dd></dl>
<p><small>
<a href="/wiki/Vocabulary/RankInfo#rank" title="Vocabulary/RankInfo">Rank Infinity</a> <i>-- operates on x and y as a whole --</i>
<a href="/wiki/Vocabulary/RankInfoIsImportant" title="Vocabulary/RankInfoIsImportant">WHY IS THIS IMPORTANT?</a>
</small>
</p><p><br />
</p>
<hr />
<p><a href="/wiki/Vocabulary/Glossary#Partition" title="Vocabulary/Glossary">Partitions</a> a <a href="/wiki/Vocabulary/Glossary#String" title="Vocabulary/Glossary">string</a> (or a more general kind of <a href="/wiki/Vocabulary/AET#List" title="Vocabulary/AET">list</a>) <tt>y</tt>
according to the rules of a given <a href="https://en.wikipedia.org/wiki/Mealy_machine" class="extiw" title="wikipedia:Mealy machine"> finite-state (Mealy) machine</a> defined by <a href="/wiki/Vocabulary/AET#Noun" title="Vocabulary/AET">noun</a> <tt>x</tt>.
</p>
<hr />
<h3><span class="mw-headline" id="Common_uses_2">Common uses</span></h3>
<p>1. Tokenize <a href="/wiki/Vocabulary/Glossary#String" title="Vocabulary/Glossary">strings</a> of code following some other syntax than J.
The <tt>x</tt>-<a href="/wiki/Vocabulary/AET#Argument" title="Vocabulary/AET">argument</a> defines the required syntax.
</p><p>Processing a string using (<tt>x&#160;;: y</tt>) is typically many times faster than using other primitives.
</p><p><small>The <a href="http://www.jsoftware.com/help/dictionary/d332.htm" class="extiw" title="jdic:d332">entry in the J Dictionary</a> for <tt>;:</tt> has a fully-worked example.</small><br />
</p>
<hr />
<h3><span class="mw-headline" id="Details">Details</span></h3>
<h4><span class="mw-headline" id="Overview">Overview</span></h4>
<p>A brief overview is as follows, indicating the key terms
</p>
<ul><li>The <tt>x</tt> argument provides the machine description, which comprises
<ul><li>the <i><b>output style</b></i> <tt>f</tt> which controls the information added to the output array</li>
<li>the <i><b>row/action table</b></i> <tt>s</tt>, also called the <b>state table</b> or <b>transition table</b>, which indicates, for each state number and input, what the machine should output and what state it should go to next</li>
<li>the <i><b>input classes</b></i> <tt>m</tt> which are used to convert each item of <tt>y</tt> to an input code</li>
<li>the initial values of variables used for each iteration
<ul><li><i><b>input pointer</b></i> <tt>i</tt></li>
<li><i><b>word pointer</b></i> <tt>j</tt></li>
<li><i><b>row number</b></i> (also called a <i><b>state number</b></i>) <tt>r</tt></li>
<li><i><b>final</b></i> input <tt>d</tt></li></ul></li></ul></li>
<li>The <i><b>output array</b></i> is initialized to empty.</li>
<li>Each item of input is converted into a <i><b>column number</b></i>.</li>
<li>The column numbers are processed, one per iteration:
<ul><li>the next column number is supplied to the <i><b>row/action table</b></i>: the row number and column number specify an item of the table, which is a 2-element vector giving the new row number and an <i><b>action code</b></i>.</li>
<li>The action is performed and the row number is updated.  Some actions add rows to the output array</li></ul></li>
<li>Execution continues until a 'quit' action is encountered or all the column numbers have been supplied.</li>
<li>the output array, which contains the accumulated results of the actions performed, becomes the result of the verb.</li></ul>
<h4><span class="mw-headline" id="The_y_argument:_sequence_of_inputs">The <tt>y</tt> argument: sequence of inputs</span></h4>
<p>The <tt>y</tt> argument is the sequence of inputs to the machine.  <tt>y</tt> will be converted to a list of numbers using the <tt>m</tt> portion of the <tt>x</tt> argument.
</p><p>Each item of <tt>y</tt> produces one input to the machine.  The inputs become column indexes to the state table.
</p>
<h4><span class="mw-headline" id="The_x_argument:_description_of_the_machine">The <tt>x</tt> argument: description of the machine</span></h4>
<p>The machine description, the <tt>x</tt> argument to (<tt>;: y</tt>), is a list of boxes <tt>f;s;m;ijrd</tt> .  <tt>m</tt> and <tt>ijrd</tt> may be omitted.
</p>
<h5><span id="m,_controlling_conversion_of_the_y_argument"></span><span class="mw-headline" id="m.2C_controlling_conversion_of_the_y_argument"><tt>m</tt>, controlling conversion of the <tt>y</tt> argument</span></h5>
<p><tt>m</tt> controls the conversion of the items of <tt>y</tt> to column numbers.  <tt>m</tt> may be:
</p>
<ul><li>a list of boxes.  The column number produced for an item of <tt>y</tt> is the index of the first box of <tt>m</tt> whose contents have an item equal to the item of <tt>y</tt>, or <tt>#m</tt> if there is no such box.  Formally, the column numbers are <tt>(y&#160;(1&#160;i.~&#160;(e.&#160;&gt;)"_&#160;0)"_1&#160;_&#160;m)</tt></li>
<li>(only if <tt>y</tt> is characters) a numeric list containing one column number for each ASCII character code.  Each character of <tt>y</tt> is converted to the corresponding number of <tt>m</tt>.Formally, the column numbers are <tt>(a.&#160;i.&#160;y)&#160;{&#160;m)</tt>.</li>
<li>(only if <tt>y</tt> is a numeric list) <tt>m</tt> may be empty or omitted, and <tt>y</tt> specifies the column numbers directly.</li></ul>
<h5><span id="ijrd,_giving_initial_values_for_iteration_variables"></span><span class="mw-headline" id="ijrd.2C_giving_initial_values_for_iteration_variables"><tt>ijrd</tt>, giving initial values for iteration variables</span></h5>
<p><tt>ijrd</tt> gives the initial values of 4 variables used by the sequential machine
</p>
<ul><li>The input pointer <tt>i</tt> (default <tt>0</tt>) is the index in <tt>y</tt> of the next item to be processed, and is incremented by 1 at the end of each iteration.</li>
<li>The word pointer <tt>j</tt> (default <tt>_1</tt>) is the index in <tt>y</tt> of the first item in the <i><b>current word</b></i>.  When the action code calls for producing output, the output will start with item <tt>j</tt>.  When <tt>j</tt> is <tt>_1</tt>, there is no current word.</li>
<li>The row number <tt>r</tt> (default <tt>0</tt>) is used to index the row/action table.</li>
<li>The final column <tt>d</tt> (default <tt>_1</tt>) is an extra column number that will be processed after the last item of <tt>y</tt> has been processed; it is the column for 'end-of-input'.  If <tt>d</tt> is negative, no end-of-input column is processed.</li></ul>
<h5><span id="s,_the_row/action_table_(aka_state_table_or_transition_table)"></span><span class="mw-headline" id="s.2C_the_row.2Faction_table_.28aka_state_table_or_transition_table.29"><tt>s</tt>, the row/action table (aka state table or transition table)</span></h5>
<p><tt>s</tt> gives the row/action table.  This table has as many rows as needed to encode all the states of the sequential machine, and as many columns as there are possible columns numbers of mapped input.  Each 1-cell of <tt>s</tt> is a 2-element list, containing in order:
</p>
<ul><li>the <i><b>next state</b></i>, the row number for the next iteration.</li>
<li>the <i><b>action code</b></i>, a number from 0 to 7 indicating the action to be performed, with meanings as follows:</li></ul>
<dl><dd><table class="wikitable" style="text-align:center">
<tbody><tr>
<td><b>Action code</b>
</td>
<td><b>Addition to output array</b>
</td>
<td><b>Change to word pointer <tt>j</tt><br />(after any addition to the output)</b>
</td></tr>
<tr>
<td>0
</td>
<td>none
</td>
<td>none
</td></tr>
<tr>
<td>1
</td>
<td>none
</td>
<td><tt>j =. i</tt>
</td></tr>
<tr>
<td>2
</td>
<td>add single word
</td>
<td><tt>j =. i</tt>
</td></tr>
<tr>
<td>3
</td>
<td>add single word
</td>
<td><tt>j =. _1</tt>
</td></tr>
<tr>
<td>4
</td>
<td>add multiple words
</td>
<td><tt>j =. i</tt>
</td></tr>
<tr>
<td>5
</td>
<td>add multiple words
</td>
<td><tt>j =. _1</tt>
</td></tr>
<tr>
<td>6
</td>
<td>stop--no further iterations are performed
</td>
<td>none
</td></tr>
<tr>
<td>7
</td>
<td>backtrack--no output, but <tt>i</tt> is set so that the next iteration reprocesses the <i>previous</i> item of input (item <tt>i-1</tt>)
</td>
<td>none
</td></tr></tbody></table></dd></dl>
<h5><span id="f,_indicating_what_the_result_contains"></span><span class="mw-headline" id="f.2C_indicating_what_the_result_contains"><tt>f</tt>, indicating what the result contains</span></h5>
<p>When the action code indicates that something should be added to the output, the value that is appended depends on the <tt>f</tt> parameter, which came from the <tt>x</tt> argument to (<tt>x&#160;;: y</tt>) and the values of the iteration variables.  The values appended for different values of f are (r=row number, c=column number, j=word pointer, i=input pointer):
</p><p><br /> 
</p>
<dl><dd><table class="wikitable" style="text-align:center">
<tbody><tr>
<td><tt><b>f</b></tt>
</td>
<td><b>Value appended</b>
</td>
<td><b>Description</b>
</td></tr>
<tr>
<td>0
</td>
<td>the items of <tt>y</tt> between <tt>j</tt> and <tt>i-1</tt>, boxed
</td>
<td>Boxed word of <tt>y</tt>
</td></tr>
<tr>
<td>1
</td>
<td>the items of <tt>y</tt> between <tt>j</tt> and <tt>i-1</tt>
</td>
<td>Unboxed word of <tt>y</tt>
</td></tr>
<tr>
<td>2
</td>
<td><tt>j</tt> , <tt>i-j</tt>
</td>
<td>Index and length of word
</td></tr>
<tr>
<td>3
</td>
<td><tt>c</tt> + <tt>r</tt> * number of columns in <tt>s</tt><br /><small>This can be written in J as <tt>(}:$s)&#160;#:&#160;r,c</tt></small>
</td>
<td>Coded row and column
</td></tr>
<tr>
<td>4
</td>
<td><tt>j</tt> , <tt>(i-j)</tt> , <tt>c</tt> + <tt>r</tt> * number of columns in <tt>s</tt><br /><small>This can be written in J as <tt>j&#160;,&#160;(i-j),&#160;(}:$s)&#160;#:&#160;r,c</tt></small>
</td>
<td>Index and length of word, and coded row and column
</td></tr>
<tr>
<td>5
</td>
<td><tt>i</tt> , <tt>j</tt>, <tt>r</tt> , <tt>c</tt> , <tt>(&lt;r,c){s</tt>
</td>
<td>Input pointer, word pointer, row, column, new row, action.<br />When <tt>f</tt> is 5, one row is added to the output for each iteration, regardless of the action codes.
</td></tr></tbody></table></dd></dl>
<p>The indicated data is appended to the output array whenever an 'add single word' action is executed. 
</p><p>The 'add multiple words' action also adds the data, but coalesces multiple occurrences into a single added value.  'Add multiple words' actions are delayed, and consecutive ones <b>from the same state</b> are combined into a single word that is emitted only when the input string is exhausted, or a word is emitted from a different state.
</p>
<h4><span class="mw-headline" id="Running_the_Machine">Running the Machine</span></h4>
<p>Execution of the state machine follows this program:
</p>
<pre>NB. On input the variables i, j, r, and d have been set, the state table s and the
NB. output format f have been extracted, the argument y has been converted into a
NB. list of column numbers n, and the result has been initialized to a zero-item array
NB. where the items have the proper shape for f.
sq=:4&#160;:0
  'f s m ijrd' =. x,(#x)}.0;0;'';0 _1 0 _1 assert. 2 &lt;: #x
  'i j r d' =. ijrd
  'pj pr' =. j,_1
  if. 0 &lt; L. m do. n =. (y i.~;m) { (#m),~(#&amp;&gt;m)#i.#m 
  elseif. ''-:m do. n =. y
  elseif. do. n =. (a.i.y){m 
  end.
  result=. f {:: (0#a:);'';i.&amp;.&gt;0 2;0;0 3;0 6
  while. i &lt;: #n do.
    if. i = #n do.
      if. d &gt;: 0 do. 'newrow action' =. (&lt;r,c =. d) { s
      elseif. j = _1 do. break.
      elseif. f = 5 do. break.  NB. Don't output final flush 
      elseif. do. 'newrow action' =. 0 5
      end.
    else. 'newrow action' =. (&lt;r,c =. i { n) { s
    end.
    assert. newrow &lt; #s
    if. f = 5 do. result =. result , i, j, r, c, newrow, action end.
    select. action
      case. 0 do.
      case. 6 do. break.
      case. 7 do. i =. i-1 continue. NB. backtrack
      fcase. 2;3;4;5 do. NB. emit
        assert. j &gt;: 0
        if. f ~: 5 do.
          ej=. ((r=pr)*action&gt;3) { j,pj
          select. f
            case. 0 do. newdata =. &lt; ej }. i {. y
            case. 1 do. newdata =. ej }. i {. y
            case. 2 do. newdata =. ej , i
            case. 3 do. newdata =. (}:$s) #: r,c
            case. 4 do. newdata =. ej , (i-ej) , (}:$s) #: r,c
            case. do. Invalid output type' 13!:8 (1)
          end.
          if. (action &lt;: 3)+.r~:pr do. result =. result , newdata
          else. result =. newdata (&lt;:#result)} result
          end.
        end.
        if. r~:pr do. pj =. j end.
        pr =. action {_1 _1 _1 _1,r,r
      case. 1 do. j =. (action e. 1 2 4) { _1,i
      case. do. 'Invalid action' 13!:8 (1)
    end. NB. end of select. action
    r =. newrow
    i =. i + 1
  end.
  result
)
</pre>
<p>Notes:
</p>
<ul><li>If no 'stop' action has been encountered, then after the last item of <tt>y</tt> has been processed, the end-of-input action is performed: if <tt>d</tt> is nonnegative, one last iteration is performed with <tt>d</tt> as the column number; otherwise, one final 'add multiple words' action is performed if <tt>j</tt> is not <tt>_1</tt>.</li>
<li>Executing an 'emit' action when <tt>j</tt> is <tt>_1</tt> produces a domain error.</li></ul>
<h4><span class="mw-headline" id="Example_Of_Use">Example Of Use</span></h4>
<p>To illustrate the use of (<tt>x&#160;;: y</tt>) we will build a machine to recognize C-style hex constants in character input, where a hex constant is '0x' followed by any positive number of hexadecimal digits.
</p><p>We see that the input characters are in 4 classes
</p>
<ul><li>the character 0</li>
<li>the character x</li>
<li>the hexadecimal characters 0123456789abcdefABCDEF</li>
<li>all other characters.</li></ul>
<p>We will assign these column numbers 3, 2, 1, and 0 respectively.  The conversion control <tt>m</tt> can be generated by the statements
</p>
<pre>   m =. a. e. '0x123456789abcdefABCDEF'
   m =. m + a. e. '0x'
   m =. m + a. e. '0'
</pre>
<p>and can be verified by
</p>
<pre>   (a. i. '0x2aq') { m
3 2 1 1 0
</pre>
<p>We can build the state table <tt>s</tt> now.  There will be 4 rows.  First, we wait for 0; then we expect x; then we expect a hexadecimal digit, signaling start-of-word if we see it; then we wait for a non-hexadecimal-digit, and output the word when we get one.  The state table will look like this:
</p>
<dl><dd><table class="wikitable" style="text-align:center">
<tbody><tr>
<td><b>Row number</b>
</td>
<td><b>Description of state</b>
</td>
<td><b>Newrow,Action<br />for input class 0<br />(other)</b>
</td>
<td><b>Newrow,Action<br />for input class 1<br />(hex digit)</b>
</td>
<td><b>Newrow,Action<br />for input class 2<br />(x)</b>
</td>
<td><b>Newrow,Action<br />for input class 3<br />(0)</b>
</td></tr>
<tr>
<td>0
</td>
<td>Waiting for 0
</td>
<td>0 0
</td>
<td>0 0
</td>
<td>0 0
</td>
<td>1 1
</td></tr>
<tr>
<td>1
</td>
<td>Expecting x
</td>
<td>0 0
</td>
<td>0 0
</td>
<td>2 0
</td>
<td>0 0
</td></tr>
<tr>
<td>2
</td>
<td>Expecting first digit
</td>
<td>0 0
</td>
<td>3 0
</td>
<td>0 0
</td>
<td>3 0
</td></tr>
<tr>
<td>3
</td>
<td>Expecting nondigit or end
</td>
<td>0 3
</td>
<td>3 0
</td>
<td>0 3
</td>
<td>3 0
</td></tr>
</tbody></table></dd></dl>
<p>This state table is generated by:
</p>
<pre>   s =. 1 4 2 $ 0 0 0 0 0 0 1 1
   s =. s , 4 2 $ 0 0 0 0 2 0 0 0
   s =. s , 4 2 $ 0 0 3 0 0 0 3 0
   s =. s , 4 2 $ 0 3 3 0 0 3 3 0
</pre>
<p>and we use it with
</p>
<pre>   (0;s;m;0 _1 0 0)&#160;;: 'qqq0x30x30x40x0xxxx'
+----+----+
|0x30|0x40|
+----+----+
   (0;s;m;0 _1 0 0)&#160;;: 'qqq0x30x30x40x0x34a'
+----+----+-----+
|0x30|0x40|0x34a|
+----+----+-----+
</pre>
<p>Note in the second example that <tt>0x34a</tt> was emitted by the end-of-input action.
</p>
<h3><span id="Words,_revisited"></span><span class="mw-headline" id="Words.2C_revisited">Words, revisited</span></h3>
<p>The behavior of <tt>;:y</tt> can be emulated, approximately (the monad can trigger open quote errors), using <tt>(0;sj;mj);:y</tt> where
</p>
<pre>mj=: 256$0                     NB. X other
mj=: 1 (9,a.i.' ')}mj          NB. S space and tab
mj=: 2 (,(a.i.'Aa')+/i.26)}mj  NB. A A-Z a-z excluding N B
mj=: 3 (a.i.'N')}mj            NB. N the letter N
mj=: 4 (a.i.'B')}mj            NB. B the letter B
mj=: 5 (a.i.'0123456789_')}mj  NB. 9 digits and _
mj=: 6 (a.i.'.')}mj            NB. . the decimal point
mj=: 7 (a.i.':')}mj            NB.&#160;: the colon
mj=: 8 (a.i.'''')}mj           NB. Q quote
mj=: 9 (a.i.'{')}mj            NB. { the left curly brace
mj=:10 (10)} mj                NB. LF
mj=:11 (a.i.'}')}mj            NB. } the right curly brace

sj=: 0 10#:10*}.".;._2(0&#160;:0)
' X   S   A   N   B   9   .  &#160;:   Q    {    LF   }']0
 1.1 0.0 2.1 3.1 2.1 6.1 1.1 1.1 7.1 11.1 10.1 12.1 NB. 0 space
 1.2 0.3 2.2 3.2 2.2 6.2 1.0 1.0 7.2 11.2 10.2 12.2 NB. 1 other
 1.2 0.3 2.0 2.0 2.0 2.0 1.0 1.0 7.2 11.2 10.2 12.2 NB. 2 alp/num
 1.2 0.3 2.0 2.0 4.0 2.0 1.0 1.0 7.2 11.2 10.2 12.2 NB. 3 N
 1.2 0.3 2.0 2.0 2.0 2.0 5.0 1.0 7.2 11.2 10.2 12.2 NB. 4 NB
 9.0 9.0 9.0 9.0 9.0 9.0 1.0 1.0 9.0  9.0 10.2  9.0 NB. 5 NB.
 1.4 0.5 6.0 6.0 6.0 6.0 6.0 1.0 7.4 11.4 10.2 12.4 NB. 6 num
 7.0 7.0 7.0 7.0 7.0 7.0 7.0 7.0 8.0  7.0  7.0  7.0 NB. 7 '
 1.2 0.3 2.2 3.2 2.2 6.2 1.2 1.2 7.0 11.2 10.2 12.2 NB. 8 ''
 9.0 9.0 9.0 9.0 9.0 9.0 9.0 9.0 9.0  9.0 10.2  9.0 NB. 9 comment
 1.2 0.2 2.2 3.2 2.2 6.2 1.2 1.2 7.2 11.2 10.2 12.2 NB. 10 LF
 1.2 0.3 2.2 3.2 2.2 6.2 1.0 1.0 7.2 13.0 10.2  1.2 NB. 11 {
 1.2 0.3 2.2 3.2 2.2 6.2 1.0 1.0 7.2  1.2 10.2 14.0 NB. 12 }
 1.2 0.3 2.2 3.2 2.2 6.2 1.7 1.7 7.2  1.2 10.2  1.2 NB. 13 {{
 1.2 0.3 2.2 3.2 2.2 6.2 1.7 1.7 7.2  1.2 10.2  1.2 NB. 14 }}
)
</pre>
<p>FIXME: link to relevant point in j version history, once that has been published, for this version of the state table.
</p>
<h3><span class="mw-headline" id="More_Information">More Information</span></h3>
<p>For detailed development of elementary examples, see: <a href="/wiki/Vocabulary/SequentialMachineNotes" title="Vocabulary/SequentialMachineNotes">Vocabulary/SequentialMachineNotes</a> and  <a href="/wiki/SequentialMachine" title="SequentialMachine">Generate useful tokens from input</a>.
</p><p>Also explore the "Sequential Machine" and "Huffman Code" labs from the J session, in <b><tt>Help &gt; Studio &gt; Labs...</tt></b>
</p><p><small> in J6, the labs are found at <b><tt>Studio &gt; Labs...</tt></b> </small>
<br /><small> in J8, the labs are found at <b><tt>Help &gt; Studio &gt; Labs...</tt></b> </small>
</p>
<p>
The <a href="http://www.jsoftware.com/help/dictionary/d332.htm" class="extiw" title="jdic:d332">entry in the J Dictionary</a> for (<tt>;:</tt>) also contains useful examples to build the <a href="/wiki/Vocabulary/AET#Noun" title="Vocabulary/AET">noun</a> <tt>x</tt> to define your own Sequential Machine,
including a complete definition equivalent to the <a href="/wiki/Vocabulary/Glossary#Monad" title="Vocabulary/Glossary">monadic</a> use of (<tt>;:</tt>) to tokenize a <a href="/wiki/Vocabulary/Glossary#String" title="Vocabulary/Glossary">string</a> of J code.

</p><hr />

<!-- 
NewPP limit report
Cached time: 20210812104144
Cache expiry: 86400
Dynamic content: false
CPU time usage: 0.029 seconds
Real time usage: 0.030 seconds
Preprocessor visited node count: 168/1000000
Preprocessor generated node count: 314/1000000
Post‐expand include size: 719/2097152 bytes
Template argument size: 0/2097152 bytes
Highest expansion depth: 2/40
Expensive parser function count: 0/100
Unstrip recursion depth: 0/20
Unstrip post‐expand size: 4760/5000000 bytes
-->
<!--
Transclusion expansion time report (%,ms,calls,template)
100.00%    2.134      1 -total
 31.26%    0.667      1 Vocabulary/rank1varl
 21.98%    0.469      1 Vocabulary/rank
 21.51%    0.459      1 Vocabulary/stdlib
-->
</div>
<!-- Saved in parser cache with key my_wiki:pcache:idhash:3406-0!canonical and timestamp 20210812104144 and revision id 29563
 -->
</div>					<div class="printfooter">
						Retrieved from "<a dir="ltr" href="https://code.jsoftware.com/mediawiki/index.php?title=Vocabulary/semico&amp;oldid=29563">https://code.jsoftware.com/mediawiki/index.php?title=Vocabulary/semico&amp;oldid=29563</a>"					</div>
				<div id="catlinks" class="catlinks" data-mw="interface"><div id="mw-normal-catlinks" class="mw-normal-catlinks"><a href="/wiki/Special:Categories" title="Special:Categories">Category</a>: <ul><li><a href="/mediawiki/index.php?title=Category:Voc&amp;action=edit&amp;redlink=1" class="new" title="Category:Voc (page does not exist)">Voc</a></li></ul></div></div>				<div class="visualClear"></div>
							</div>
		</div>
		<div id="mw-navigation">
			<h2>Navigation menu</h2>
			<div id="mw-head">
									<div id="p-personal" role="navigation" class="" aria-labelledby="p-personal-label">
						<h3 id="p-personal-label">Personal tools</h3>
						<ul>
							<li id="pt-login"><a href="/mediawiki/index.php?title=Special:UserLogin&amp;returnto=Vocabulary%2Fsemico" title="You are encouraged to log in; however, it is not mandatory [o]" accesskey="o">Log in</a></li>						</ul>
					</div>
									<div id="left-navigation">
										<div id="p-namespaces" role="navigation" class="vectorTabs" aria-labelledby="p-namespaces-label">
						<h3 id="p-namespaces-label">Namespaces</h3>
						<ul>
							<li id="ca-nstab-main" class="selected"><span><a href="/wiki/Vocabulary/semico" title="View the content page [c]" accesskey="c">Page</a></span></li><li id="ca-talk" class="new"><span><a href="/mediawiki/index.php?title=Talk:Vocabulary/semico&amp;action=edit&amp;redlink=1" rel="discussion" title="Discussion about the content page (page does not exist) [t]" accesskey="t">Discussion</a></span></li>						</ul>
					</div>
										<div id="p-variants" role="navigation" class="vectorMenu emptyPortlet" aria-labelledby="p-variants-label">
												<input type="checkbox" class="vectorMenuCheckbox" aria-labelledby="p-variants-label" />
						<h3 id="p-variants-label">
							<span>Variants</span>
						</h3>
						<div class="menu">
							<ul>
															</ul>
						</div>
					</div>
									</div>
				<div id="right-navigation">
										<div id="p-views" role="navigation" class="vectorTabs" aria-labelledby="p-views-label">
						<h3 id="p-views-label">Views</h3>
						<ul>
							<li id="ca-view" class="collapsible selected"><span><a href="/wiki/Vocabulary/semico">Read</a></span></li><li id="ca-viewsource" class="collapsible"><span><a href="/mediawiki/index.php?title=Vocabulary/semico&amp;action=edit" title="This page is protected.&#10;You can view its source [e]" accesskey="e">View source</a></span></li><li id="ca-history" class="collapsible"><span><a href="/mediawiki/index.php?title=Vocabulary/semico&amp;action=history" title="Past revisions of this page [h]" accesskey="h">View history</a></span></li>						</ul>
					</div>
										<div id="p-cactions" role="navigation" class="vectorMenu emptyPortlet" aria-labelledby="p-cactions-label">
						<input type="checkbox" class="vectorMenuCheckbox" aria-labelledby="p-cactions-label" />
						<h3 id="p-cactions-label"><span>More</span></h3>
						<div class="menu">
							<ul>
															</ul>
						</div>
					</div>
										<div id="p-search" role="search">
						<h3>
							<label for="searchInput">Search</label>
						</h3>
						<form action="/mediawiki/index.php" id="searchform">
							<div id="simpleSearch">
								<input type="search" name="search" placeholder="Search J Wiki" title="Search J Wiki [f]" accesskey="f" id="searchInput"/><input type="hidden" value="Special:Search" name="title"/><input type="submit" name="fulltext" value="Search" title="Search the pages for this text" id="mw-searchButton" class="searchButton mw-fallbackSearchButton"/><input type="submit" name="go" value="Go" title="Go to a page with this exact name if it exists" id="searchButton" class="searchButton"/>							</div>
						</form>
					</div>
									</div>
			</div>
			<div id="mw-panel">
				<div id="p-logo" role="banner"><a class="mw-wiki-logo" href="/wiki/Main_Page"  title="Visit the main page"></a></div>
						<div class="portal" role="navigation" id="p-navigation" aria-labelledby="p-navigation-label">
			<h3 id="p-navigation-label">Navigation</h3>
			<div class="body">
								<ul>
					<li id="n-New-Users"><a href="/wiki/Guides/GettingStarted">New Users</a></li><li id="n-Guides"><a href="/wiki/Guides">Guides</a></li><li id="n-NuVoc"><a href="/wiki/NuVoc">NuVoc</a></li><li id="n-System"><a href="/wiki/System">System</a></li><li id="n-Showcase"><a href="/wiki/Showcase">Showcase</a></li><li id="n-Library"><a href="/wiki/Library">Library</a></li><li id="n-Community"><a href="/wiki/Community">Community</a></li><li id="n-Recent-changes"><a href="/wiki/Special:RecentChanges">Recent changes</a></li><li id="n-Random-page"><a href="/wiki/Special:Random">Random page</a></li><li id="n-J-wiki-search"><a href="/wiki/Special:JwikiSearch">J wiki search</a></li>				</ul>
							</div>
		</div>
			<div class="portal" role="navigation" id="p-tb" aria-labelledby="p-tb-label">
			<h3 id="p-tb-label">Tools</h3>
			<div class="body">
								<ul>
					<li id="t-whatlinkshere"><a href="/wiki/Special:WhatLinksHere/Vocabulary/semico" title="A list of all wiki pages that link here [j]" accesskey="j">What links here</a></li><li id="t-recentchangeslinked"><a href="/wiki/Special:RecentChangesLinked/Vocabulary/semico" rel="nofollow" title="Recent changes in pages linked from this page [k]" accesskey="k">Related changes</a></li><li id="t-specialpages"><a href="/wiki/Special:SpecialPages" title="A list of all special pages [q]" accesskey="q">Special pages</a></li><li id="t-print"><a href="/mediawiki/index.php?title=Vocabulary/semico&amp;printable=yes" rel="alternate" title="Printable version of this page [p]" accesskey="p">Printable version</a></li><li id="t-permalink"><a href="/mediawiki/index.php?title=Vocabulary/semico&amp;oldid=29563" title="Permanent link to this revision of the page">Permanent link</a></li><li id="t-info"><a href="/mediawiki/index.php?title=Vocabulary/semico&amp;action=info" title="More information about this page">Page information</a></li><li id="t-cite"><a href="/mediawiki/index.php?title=Special:CiteThisPage&amp;page=Vocabulary%2Fsemico&amp;id=29563" title="Information on how to cite this page">Cite this page</a></li>				</ul>
							</div>
		</div>
				</div>
		</div>
				<div id="footer" role="contentinfo">
						<ul id="footer-info">
								<li id="footer-info-lastmod"> This page was last edited on 22 November 2020, at 11:12.</li>
							</ul>
						<ul id="footer-places">
								<li id="footer-places-about"><a href="/wiki/About" title="About">About J Wiki</a></li>
							</ul>
										<ul id="footer-icons" class="noprint">
										<li id="footer-poweredbyico">
						<a href="//www.mediawiki.org/"><img src="/mediawiki/resources/assets/poweredby_mediawiki_88x31.png" alt="Powered by MediaWiki" srcset="/mediawiki/resources/assets/poweredby_mediawiki_132x47.png 1.5x, /mediawiki/resources/assets/poweredby_mediawiki_176x62.png 2x" width="88" height="31"/></a>					</li>
									</ul>
						<div style="clear: both;"></div>
		</div>
		<script>(window.RLQ=window.RLQ||[]).push(function(){mw.config.set({"wgPageParseReport":{"limitreport":{"cputime":"0.029","walltime":"0.030","ppvisitednodes":{"value":168,"limit":1000000},"ppgeneratednodes":{"value":314,"limit":1000000},"postexpandincludesize":{"value":719,"limit":2097152},"templateargumentsize":{"value":0,"limit":2097152},"expansiondepth":{"value":2,"limit":40},"expensivefunctioncount":{"value":0,"limit":100},"unstrip-depth":{"value":0,"limit":20},"unstrip-size":{"value":4760,"limit":5000000},"timingprofile":["100.00%    2.134      1 -total"," 31.26%    0.667      1 Vocabulary/rank1varl"," 21.98%    0.469      1 Vocabulary/rank"," 21.51%    0.459      1 Vocabulary/stdlib"]},"cachereport":{"timestamp":"20210812104144","ttl":86400,"transientcontent":false}}});});</script><script>(window.RLQ=window.RLQ||[]).push(function(){mw.config.set({"wgBackendResponseTime":63});});</script>
	</body>
</html>
